package {
    default_applicable_licenses: ["external_zlib_license"],
}

license {
    name: "external_zlib_license",
    visibility: [":__subpackages__"],
    license_kinds: [
        "SPDX-license-identifier-BSD",
        "SPDX-license-identifier-Zlib",
    ],
    license_text: [
        "LICENSE.md",
    ],
}

srcs_arm = [
    "arch/arm/adler32_neon.c",
    "arch/arm/arm_features.c",
    "arch/arm/chunkset_neon.c",
    "arch/arm/compare256_neon.c",
    "arch/arm/crc32_acle.c",
    "arch/arm/insert_string_acle.c",
    "arch/arm/slide_hash_neon.c",
]

cflags_arm = [
    "-DARM_FEATURES",
    "-DHAVE_SYS_AUXV_H",
    "-DARM_AUXV_HAS_CRC32",
    "-DARM_AUXV_HAS_NEON",
    "-DARM_NEON",
    "-DARM_ACLE",
]

cflags_arm64 = [
    "-DARM_NEON_HASLD4",
]

srcs_x86 = [
    //"arch/x86/adler32_avx2.c",
    "arch/x86/adler32_avx512.c",
    "arch/x86/adler32_avx512_vnni.c",
    "arch/x86/adler32_sse42.c",
    "arch/x86/adler32_ssse3.c",
    //"arch/x86/chunkset_avx2.c",
    "arch/x86/chunkset_sse2.c",
    "arch/x86/chunkset_ssse3.c",
    //"arch/x86/compare256_avx2.c",
    "arch/x86/compare256_sse2.c",
    "arch/x86/crc32_pclmulqdq.c",
    "arch/x86/crc32_vpclmulqdq.c",
    "arch/x86/insert_string_sse42.c",
    //"arch/x86/slide_hash_avx2.c",
    "arch/x86/slide_hash_sse2.c",
    "arch/x86/x86_features.c",
]

cflags_x86 = [
    // "-DX86_AVX2",
    // "-DX86_AVX512",
    "-DX86_MASK_INTRIN",
    // "-DX86_AVX512VNNI",
    "-DX86_FEATURES",
    "-DX86_PCLMULQDQ_CRC",
    // "-DX86_VPCLMULQDQ_CRC", 
    "-DX86_SSE2",
    "-DX86_SSE41",
    "-DX86_SSE42",
    "-DX86_SSSE3",
    //"-mavx2",
    // "-mavx512vnni",
    // "-mavx512f",
    // "-mavx512dq",
    // "-mavx512bw",
    // "-mavx512vl",
    "-msse2",
    "-msse4.1",
    "-msse4.2",
    "-mssse3",
    "-mpclmul",
    // "-mvpclmulqdq",
]

libz_srcs = [
    "adler32.c",
    "adler32_fold.c",
    "chunkset.c",
    "compare256.c",
    "compress.c",
    "cpu_features.c",
    "crc32_braid_comb.c",
    "crc32_braid.c",
    "crc32_fold.c",
    "deflate_fast.c",
    "deflate_huff.c",
    "deflate_medium.c",
    "deflate_quick.c",
    "deflate_rle.c",
    "deflate_slow.c",
    "deflate_stored.c",
    "deflate.c",
    "functable.c",
    "gzlib.c",
    "gzread.c",
    "gzwrite.c",
    "infback.c",
    "inflate.c",
    "inftrees.c",
    "insert_string_roll.c",
    "insert_string.c",
    "slide_hash.c",
    "trees.c",
    "uncompr.c",
    "zutil.c",
]

cflags_common = [
    "-DHAVE_BUILTIN_CTZ",
    "-DHAVE_BUILTIN_CTZLL",
    "-DHAVE_VISIBILITY_HIDDEN",
    "-DHAVE_VISIBILITY_INTERNAL",
    "-DZLIB_CONST",
    "-DHAVE_ATTRIBUTE_ALIGNED",

    "-DWITH_GZFILEOP",
    "-DZLIB_COMPAT",
    "-DZLIB_DLL",
    "-D_LARGEFILE64_SOURCE=1",
    "-D__USE_LARGEFILE64",
    "-Wno-unused-command-line-argument",
    "-O3",
    "-DNDEBUG",
    "-fno-semantic-interposition",
]

cc_defaults {
    name: "libz_defaults",

    cflags: cflags_common,
    stl: "none",
    export_include_dirs: ["."],

    host_supported: true,
    native_bridge_supported: true,

    vendor_available: true,
    product_available: true,
    ramdisk_available: true,
    vendor_ramdisk_available: true,
    recovery_available: true,

    arch: {
        arm: {
            // TODO: This is to work around b/24465209. Remove after root cause
            // is fixed.
            pack_relocations: false,
            ldflags: ["-Wl,--hash-style=both"],

            cflags: cflags_arm,
        },
        arm64: {
            cflags: cflags_arm + cflags_arm64,
        },
        x86_64: {
            cflags: cflags_x86,
        }
    },
    target: {
        android_x86: {
            cflags: cflags_x86,
            srcs: srcs_x86,
        },
        windows: {
            enabled: true,
        },
    },

    lto: {
        never: true,
    },
    c_std: "c11",
}

cc_library {
    name: "libz",
    defaults: ["libz_defaults"],

    whole_static_libs: ["libz_static"],

    unique_host_soname: true,
    static_ndk_lib: true,

    vndk: {
        enabled: true,
        support_system_process: true,
    },

    stubs: {
        versions: [
            "29",
            "30",
        ],
        symbol_file: "libz.map.txt",
    },
}

cc_library {
    name: "libz_static",
    defaults: ["libz_defaults"],
    visibility: ["//external/angle"],
    srcs: libz_srcs,

    arch: {
        arm: {
            srcs: srcs_arm,
        },
        arm64: {
            srcs: srcs_arm,
        },
        x86_64: {
            srcs: srcs_x86,
        }
    },

    sdk_version: "minimum",

    apex_available: [
        "com.android.runtime",
        "//apex_available:platform",
    ],
}

// A more stable build of libz. Build configuration of this library should be
// the same for different targets. This is only used by imgdiff.

cc_library {
    name: "libz_stable",
    visibility: [
        "//bootable/recovery/applypatch",
        "//bootable/recovery/tests",
    ],
    cflags: cflags_common,
    stl: "none",
    export_include_dirs: ["."],
    srcs: libz_srcs,

    host_supported: true,
    vendor_available: true,
    recovery_available: true,
}

cc_binary_host {
    name: "minigzip",
    srcs: ["test/minigzip.c"],
    cflags: cflags_common,
    static_libs: ["libz"],
    stl: "none",
}

cc_binary {
    name: "zlib_bench",
    srcs: ["contrib/bench/zlib_bench.cc"],
    cflags: ["-Wall", "-Werror"],
    host_supported: true,
    shared_libs: ["libz"],
    // We build zlib_bench32 and zlib_bench64 so it's easy to test LP32.
    compile_multilib: "both",
    multilib: {
        lib32: { suffix: "32", },
        lib64: { suffix: "64", },
    },
}

cc_library {
    name: "zlib_google_compression_utils_portable",
    defaults: ["libz_defaults"],
    srcs: [
        "google/compression_utils_portable.cc",
    ],
    export_include_dirs: ["google"],
    host_supported: true,
    shared_libs: ["libz"],
    sdk_version: "minimum",
    visibility: ["//external/angle"],
    apex_available: [
        "com.android.runtime",
        "//apex_available:platform",
    ],
}

ndk_headers {
    name: "libz_headers",
    from: "",
    to: "",
    srcs: [
        "zconf.h",
        "zlib.h",
        "zlib_name_mangling.h",
    ],
    license: "LICENSE.md",
}

ndk_library {
    name: "libz",
    symbol_file: "libz.map.txt",
    first_version: "9",
    unversioned_until: "current",
}

// Export zlib headers for inclusion in the musl sysroot.
genrule {
    name: "libc_musl_sysroot_zlib_headers",
    visibility: ["//external/musl"],
    srcs: [
        "LICENSE.md",
        "zconf.h",
        "zlib.h",
    ],
    out: ["libc_musl_sysroot_zlib_headers.zip"],
    tools: [
        "soong_zip",
        "zip2zip",
    ],
    cmd: "$(location soong_zip) -o $(genDir)/sysroot.zip -symlinks=false" +
        // NOTICE
        " -j -f $(location LICENSE.md) " +
        // headers
        " -j -P include " +
        "  -f $(location zconf.h) " +
        "  -f $(location zlib.h) " +
        " && " +
        "$(location zip2zip) -i $(genDir)/sysroot.zip -o $(out) " +
        " include/**/*:include " +
        " LICENSE.md:NOTICE.zlib",
}
